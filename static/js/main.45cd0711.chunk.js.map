{"version":3,"sources":["components/Counter.js","components/TaskName.js","components/Task.js","components/PendingTask.js","components/TaskList.js","components/App.js","index.js"],"names":["Counter","props","className","numberUncompleted","numberCompleted","numberTotal","TaskName","isEditing","type","value","children","onChange","handleNameEdits","Task","e","setName","target","name","checked","isCompleted","handleCompleted","onClick","handleToggleEditing","handleRemove","PendingTask","TaskList","pendingTask","tasks","filter","task","isFiltered","map","index","key","toggleCompletedAt","toggleEditingAt","text","setNameAt","removeTaskAt","App","state","toggleTaskPropertyAt","property","indexToChange","setState","slice","toggleFilter","handleNameInput","newTaskSubmitHandler","preventDefault","getTotaltask","length","getCompletedTask","reduce","total","totalTask","this","numberUnCompleted","onSubmit","placeholder","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45cd0711.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = props => \n    <table className=\"counter\">\n        <tbody>\n            <tr>\n                <td>Task To Do:</td>\n                <td>{props.numberUncompleted}</td>\n            </tr>\n            <tr>\n                <td>Task Completed:</td>\n                <td>{props.numberCompleted}</td>\n            </tr>\n            <tr>\n                <td>Total:</td>\n                <td>{props.numberTotal}</td>\n            </tr>\n        </tbody>\n    </table>;\n\n    Counter.propTypes ={\n        numberUncompleted: PropTypes.number,\n        numberCompleted: PropTypes.number,\n        numberTotal: PropTypes.number\n    }\n\nexport default Counter","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TaskName = props => {\n    if(props.isEditing){\n        return(\n          <input \n          type=\"text\" \n          value={props.children} \n          onChange={props.handleNameEdits}\n          />\n        );\n    }\n    return(\n        <span>\n            {props.children}\n        </span>\n    )\n};\n\nTaskName.propTypes = {\n    isEditing: PropTypes.bool.isRequired,\n    handleNameEdits: PropTypes.func.isRequired\n};\n\nexport default TaskName;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TaskName from '../components/TaskName';\n\nconst Task = props => \n    <li>\n        <TaskName \n            isEditing={props.isEditing}\n            handleNameEdits={e => props.setName(e.target.value)}>\n            {props.name}\n        </TaskName>\n        <label>\n            <input \n                type=\"checkbox\" \n                checked={props.isCompleted} \n                onChange={props.handleCompleted}\n            />Completed\n        </label>\n        <button onClick={props.handleToggleEditing}>\n            {props.isEditing ? \"save\" : \"edit\" }\n        </button>\n        <button className=\"warning\" onClick={props.handleRemove}>Remove</button>\n    </li>\n\n    Task.propTypes = {\n        name: PropTypes.string.isRequired,\n        isCompleted: PropTypes.bool.isRequired,\n        isEditing: PropTypes.bool.isRequired,\n        handleCompleted: PropTypes.func.isRequired,\n        handleToggleEditing: PropTypes.func.isRequired,\n        setName: PropTypes.func.isRequired\n    }\n\nexport default Task","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PendingTask = props => {\n    if(props.name){\n        return(\n            <li className=\"pending\">\n                <span>\n                    {props.name}\n                </span>\n            </li>\n        );\n    }\n    return null;\n};\n\nPendingTask.propTypes = {\n    name: PropTypes.string.isRequired\n};\n\nexport default PendingTask;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Task from '../components/Task'\nimport PendingTask from '../components/PendingTask'\n\nconst TaskList = props =>\n    <ul>\n        <PendingTask\n            name={props.pendingTask}\n        />\n        {props.tasks\n        .filter(task => !props.isFiltered || !task.isCompleted )\n        .map((task, index) =>\n            <Task \n                key={index}\n                name={task.name}\n                isCompleted={task.isCompleted}\n                isEditing={task.isEditing}\n                handleCompleted={ () => props.toggleCompletedAt(index) }\n                handleToggleEditing={ () => props.toggleEditingAt(index) }\n                setName={text => props.setNameAt(text, index)}\n                handleRemove={() => props.removeTaskAt(index)}\n            />\n        )}\n    </ul>;\n\n    TaskList.propTypes = {\n        tasks: PropTypes.array.isRequired,\n        toggleCompletedAt: PropTypes.func.isRequired,\n        toggleEditingAt: PropTypes.func.isRequired,\n        isFiltered: PropTypes.bool.isRequired,\n        pendingTask: PropTypes.string.isRequired\n    }\n\nexport default TaskList;","import React, { Component } from 'react';\n\nimport '../css/App.css';\nimport Counter from '../components/Counter'\nimport TaskList from './TaskList';\n\nclass App extends Component {\n\n  state = {\n    isFiltered: false,\n    pendingTask: \"\",\n    task: [\n      {\n        name: \"Clean kitchen\",\n        isCompleted: true,\n        isEditing: false\n      }\n    ]\n  }\n\n  toggleTaskPropertyAt = (property, indexToChange) =>\n    this.setState({\n      task: this.state.task.map((task, index) =>{\n        if(index === indexToChange) {\n          return {\n            ...task,\n            [property]: !task[property]\n          };\n        }\n        return task;\n      })\n    })\n  \n  toggleCompletedAt = index =>\n    this.toggleTaskPropertyAt(\"isCompleted\", index);\n\n  toggleEditingAt = index =>\n    this.toggleTaskPropertyAt(\"isEditing\", index);\n\n  removeTaskAt = index =>\n    this.setState({\n      task: [\n        ...this.state.task.slice(0, index),\n        ...this.state.task.slice(index +1)\n      ]\n    })\n  \n    setNameAt = (name, indexToChange) =>\n    this.setState({\n      task: this.state.task.map((task, index) => {\n        if (index === indexToChange) {\n          return {\n            ...task,\n            name\n          };\n        }\n        return task;\n      })\n    });\n\n    toggleFilter = () =>\n      this.setState({ isFiltered: !this.state.isFiltered });\n  \n    handleNameInput = e =>\n      this.setState({ pendingTask: e.target.value});\n\n    newTaskSubmitHandler = e => {\n      e.preventDefault();\n      this.setState({\n        task: [\n          {\n            name: this.state.pendingTask,\n            isCompleted: false,\n            isEditing: false\n          },\n          ...this.state.task\n        ],\n        pendingTask: ''\n      })\n    }\n\n  //get total task\n  getTotaltask = () => this.state.task.length;\n\n  getCompletedTask = () =>\n    this.state.task.reduce(\n      (total, task) => task.isCompleted ? total +1 : total,\n      0\n    );\n\n  //get uncomplted task \n\n  render(){\n    const totalTask = this.getTotaltask();\n    const numberCompleted = this.getCompletedTask();\n    const numberUnCompleted = totalTask - numberCompleted;\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>To Do List</h1>\n          <p>By: Nathon Reed</p>\n          <form onSubmit={this.newTaskSubmitHandler}>\n            <input \n              type=\"text\" \n              onChange={this.handleNameInput}\n              value={this.state.pendingTask}\n              placeholder=\"New Task\"\n\n            />\n            <button type=\"submit\" name=\"submit\" value=\"submit\">Add New Task</button>\n          </form>\n        </header>\n        <div className=\"main\">\n          <div className=\"main-top\">\n            <div className=\"hide-task\">\n              <h2>To Do Task</h2>\n              <label>\n                  <input \n                    type=\"checkbox\" \n                    onChange={this.toggleFilter}\n                    checked={this.state.isFiltered}  \n                  />Hide Completed Task\n              </label>\n            </div>\n            <Counter \n              numberTotal={totalTask}\n              numberCompleted={numberCompleted}\n              numberUncompleted={numberUnCompleted}\n            />\n          </div>\n          <div className=\"main-body\">\n            <TaskList \n              tasks={this.state.task}\n              toggleCompletedAt={this.toggleCompletedAt}\n              toggleEditingAt={this.toggleEditingAt}\n              setNameAt={this.setNameAt}\n              isFiltered={this.state.isFiltered}\n              removeTaskAt={this.removeTaskAt}\n              pendingTask={this.state.pendingTask}\n            />\n          </div>\n        </div>\n      </div>\n     );\n   }\n  }\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}